// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: vehicle.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VehicleServiceClient is the client API for VehicleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleServiceClient interface {
	GetVehicles(ctx context.Context, in *GetVehiclesRequest, opts ...grpc.CallOption) (*GetVehiclesResponse, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error)
	StreamVehicles(ctx context.Context, in *GetVehiclesRequest, opts ...grpc.CallOption) (VehicleService_StreamVehiclesClient, error)
}

type vehicleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleServiceClient(cc grpc.ClientConnInterface) VehicleServiceClient {
	return &vehicleServiceClient{cc}
}

func (c *vehicleServiceClient) GetVehicles(ctx context.Context, in *GetVehiclesRequest, opts ...grpc.CallOption) (*GetVehiclesResponse, error) {
	out := new(GetVehiclesResponse)
	err := c.cc.Invoke(ctx, "/vehicle.VehicleService/GetVehicles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error) {
	out := new(GetVehicleResponse)
	err := c.cc.Invoke(ctx, "/vehicle.VehicleService/GetVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) StreamVehicles(ctx context.Context, in *GetVehiclesRequest, opts ...grpc.CallOption) (VehicleService_StreamVehiclesClient, error) {
	stream, err := c.cc.NewStream(ctx, &VehicleService_ServiceDesc.Streams[0], "/vehicle.VehicleService/StreamVehicles", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehicleServiceStreamVehiclesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VehicleService_StreamVehiclesClient interface {
	Recv() (*StreamVehiclesResponse, error)
	grpc.ClientStream
}

type vehicleServiceStreamVehiclesClient struct {
	grpc.ClientStream
}

func (x *vehicleServiceStreamVehiclesClient) Recv() (*StreamVehiclesResponse, error) {
	m := new(StreamVehiclesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VehicleServiceServer is the server API for VehicleService service.
// All implementations must embed UnimplementedVehicleServiceServer
// for forward compatibility
type VehicleServiceServer interface {
	GetVehicles(context.Context, *GetVehiclesRequest) (*GetVehiclesResponse, error)
	GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error)
	StreamVehicles(*GetVehiclesRequest, VehicleService_StreamVehiclesServer) error
	mustEmbedUnimplementedVehicleServiceServer()
}

// UnimplementedVehicleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleServiceServer struct {
}

func (UnimplementedVehicleServiceServer) GetVehicles(context.Context, *GetVehiclesRequest) (*GetVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicles not implemented")
}
func (UnimplementedVehicleServiceServer) GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) StreamVehicles(*GetVehiclesRequest, VehicleService_StreamVehiclesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVehicles not implemented")
}
func (UnimplementedVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {}

// UnsafeVehicleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleServiceServer will
// result in compilation errors.
type UnsafeVehicleServiceServer interface {
	mustEmbedUnimplementedVehicleServiceServer()
}

func RegisterVehicleServiceServer(s grpc.ServiceRegistrar, srv VehicleServiceServer) {
	s.RegisterService(&VehicleService_ServiceDesc, srv)
}

func _VehicleService_GetVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).GetVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vehicle.VehicleService/GetVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).GetVehicles(ctx, req.(*GetVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vehicle.VehicleService/GetVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_StreamVehicles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVehiclesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehicleServiceServer).StreamVehicles(m, &vehicleServiceStreamVehiclesServer{stream})
}

type VehicleService_StreamVehiclesServer interface {
	Send(*StreamVehiclesResponse) error
	grpc.ServerStream
}

type vehicleServiceStreamVehiclesServer struct {
	grpc.ServerStream
}

func (x *vehicleServiceStreamVehiclesServer) Send(m *StreamVehiclesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VehicleService_ServiceDesc is the grpc.ServiceDesc for VehicleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vehicle.VehicleService",
	HandlerType: (*VehicleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVehicles",
			Handler:    _VehicleService_GetVehicles_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _VehicleService_GetVehicle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVehicles",
			Handler:       _VehicleService_StreamVehicles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vehicle.proto",
}
